possibleCardsの中で一番強いカードを推定し、それより強いカードを温存する
　→ 例えば「possibleCardsの中で一番強いカードより強い手札は、温存しておく」など。
possibleCardsの中に自分の手札と同じランクが残っていない場合、セット出しを狙う
　→ セットで出しても上がられにくい。


ヘルパー関数 　- countRemainingCards, countStrongerCards, countMyCards, getMinPlayerCards, countMyRanks, countLowRanks, countHighCards 　→ ほぼ同じロジック（手札・記憶・場の情報を使った枚数計算）

戦略分岐 　- updateStrategy, updateGamePhase 　→ 手札枚数・他プレイヤー枚数・フェーズで「攻撃/守備/通常」を切り替え

温存判定 　- shouldSaveStrongCards 　→ ラッシュ・終盤・手札少ない時は温存しない、通常は強いカードを温存

記憶・可能カード管理 　- updatePossibleCards 　→ 場・自分が出したカードを一括除去

approve 　→ 安全チェック＋戦略・記憶更新

follow 　→ 状況分岐・ラッシュ・ペア/セット優先・パス（基本的な出し方は同じ）

isCardSafe 　→ JOKER/2/強カード残り枚数で安全判定

【group2とgroup3の「違うところ」】

JOKER・2の特殊処理 　- group2は「2が場にない時だけJOKERを出す」「JOKERが場にない時だけ2を出す」など、より細かい安全判定や出し方をしている場合がある 　- group3は「countRemainingCards」で残り枚数を見ているが、group2独自の分岐があれば未実装

ラッシュのタイミング・分岐 　- group2は「他プレイヤー残り枚数」「自分の手札構成」「場の流れ」などを使ってラッシュのタイミングをさらに細かく分岐している場合がある 　- group3は「手札3枚以下・他プレイヤー2枚以下・終盤」でラッシュ判定

ペア/セットの優先順位 　- group2は「ペア/セットの強さ」「場の状況」「自分の残り枚数」などで優先順位をさらに細かく分岐している場合がある 　- group3は「ペア/セットがあれば優先して出す」だけ

パスの基準 　- group2は「温存」「確殺」「場の強さ」などでパスの基準をさらに細かく分岐している場合がある 　- group3は「出せるカードがなければパス」だけ

approveやreadyの初期化・記憶管理 　- group2は「memory」「possibleCards」の使い方や初期化が違う場合がある 　- group3は「基本的な初期化・管理」

デバッグ出力や細かいヘルパー関数 　- group2は「printf」や独自のヘルパー関数が多い場合がある 　- group3は「最低限のデバッグ出力」

その他 　- group2は「他プレイヤーの傾向」「場の強さ」「自分の役（革命・縛り）」など、より多くの情報を使って分岐している場合がある 　- group3は「基本的な状況分岐のみ」



他プレイヤーの残り枚数が1枚なら、強いカードを惜しまず出す。
JOKERや2が場に出たかどうかを記憶し、出し方を変える。
手札の種類数が2種類で、どちらかが多い場合は多い方から出す。
「5位阻止」など、最下位回避のための消極的戦略も状況によって選択できるようにする。


追加
負けるのを避ける作戦
他プレイヤーの残り枚数が1枚なら、強いカードを惜しまず出す。
5位阻止」など、最下位回避のための消極的戦略も状況によって選択できるようにする。

手札の種類数が2種類で、どちらかが多い場合は多い方から出す。